version: '3.8'

services:

  client:
    hostname: client
    container_name: react-dev
    build:
      context: ../client
      dockerfile: Dockerfile.dev
    image: react-dev
    environment:
      - WDS_SOCKET_HOST=127.0.0.1 
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true 
    ports: 
      - 3000:3000
    networks:
      - postgres
    depends_on:
      - postgres
      - server
    volumes:      
      - ../client:/home/client
      - node_modules-client:/home/client/node_modules/
    restart: unless-stopped

  server:
    hostname: server
    container_name: express-server-dev
    build:
      context: ../server
      dockerfile: Dockerfile.dev
    image: server-dev
    env_file:
      - ../server/.env.sample
    ports: 
      - 8080:8080
    networks:
      - postgres
    depends_on:
      - postgres
    volumes:
      - ../server:/home/server
      - node_modules-server:/home/server/node_modules/
    restart: unless-stopped

  postgres:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: ${PGDATA}
    volumes:
      - postgres:${PGDATA}
    ports:
      - "5432:5432"
    networks:
      - postgres
    restart: unless-stopped

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    depends_on:
      - postgres
    ports:
      - "${PGADMIN_PORT}:80"
    networks:
      - postgres
    restart: unless-stopped

networks:
  postgres:
    driver: bridge

volumes:
  postgres:
  pgadmin:
  node_modules-client:
  node_modules-server:
